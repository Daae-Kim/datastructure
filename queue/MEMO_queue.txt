
5장 큐 (Queue)


FIFO(first-in first-out, 선입선출)
 : 대기열을 표현하기에 적합한 자료구조

추상데이터 타입(ADT)
 - is_empty()
 - is_full()
 - enqueue(item)      // cf. push(item) onto queue
 - item <- dequeue()  // cf. item <- pop() from queue
 - peek()


                     -------
    원소를 빼내기  <-             <- 원소를 추가
                     -------

큐 vs. 스택

 - 큐를 사용한 예제
   : BFS (breadth-first search) 너비우선 탐색
   : 8.6절 (P.279, 그림 8-31) --> 레벨 순회 (level traversal)

 - 스택을 사용한 또다른 예제

   : DFS (depth-first search) 깊이우선 탐색
   : 8.5절 (P.278의 그림) --> 반복적 순회 (iterative traversal)

 
(참고: 그림 파일)


큐의 종류

 - 선형 큐
   (교재: 5.2절, P.149 그림 5-5, 슬라이드: P.6)

              ---+---+---+---+---+---+---+---+---+
dequeue  <--     |   | * | * | * | * | * |   |      <-- enqueue
              ---+---+---+---+---+---+---+---+---+

                      rear           front

 - 원형 큐 (circular queue)

   (교재: 5.3절, P.154, 그림 5-7, 슬라이드: P.12)

   : P.153
   
     선형큐는 이해하기는 쉽지만 문제점이 있다. 즉, front와 rear의 값이
     계속 증가만 하기 때문에 언젠가는 배열의 끝에 도달하게 되고 배열의 앞부분이
     비어있더라도 사용하지를 못한다는 점이다. 따라서 주기적으로 모든 요소들을
     왼쪽으로 이동시켜야 한다. [그림5-6]

     ==> 원형큐

 - 덱 (deque, double-ended queue)
   (교재: 5.5절, P.162, 그림 5-11, 슬라이드: P.25, P.27)
   
   : 양쪽에서 넣을 수 있고, 양쪽에서 뺄 수 있는 큐의 변형
   : cf. 큐: enqueue, dequeue 연산
   
   : add_front, delete_front
     add_rear, delete_rear

 - cf. 9장 우선순위 큐

   : 먼저 넣은 원소를 먼저 꺼내는 것이 아니라
     나중에 넣었더라도 우선수위가 높은 원소를 먼저 꺼내는 방식


============

(10/8)

중간고사 공지:
 - 10월22일(목) 오전9시~ (1시간)
 - 장소: 섭외 중!! ==> 나중에 공지 예정
 - 시험범위: 교재 1장 ~ 6장 또는 7장 (진도에 따라서)
    : C프로그래밍(재귀,포인터)
    : 자료구조 개요
    : 큐, 스택, 리스트(6장,7장)


============

원형 큐

 - (가정)
    (1) MAX_SIZE 크기의 배열로 구현
    (2) front : dequeue할 원소 바로 전 위치
    (3) rear : 제일 마지막에 enqueue한 원소의 위치


 is_empty()
   : front == rear 이면 비어있음
     그렇지 않으면 비어있지 않음

 is_full()
   : rear '다음'이 front이면 가득차 있음
     그렇지 않으면 추가 저장 공간이 있음

   : rear '다음'이 front ==>  (rear + 1) % MAX_SIZE == front

 enqueue(item)
   : is_full() == false이면 rear '다음'에 item을 저장
   
        rear <- (rear + 1) % MAX_SIZE
	queue_arr[rear] <- item

     is_full() == true이면 추가로 저장할 수 없음(error)

 item <- dequeue()
   : is_empty() == false이면 front '다음'에 있는 원소를 꺼낸다.

         front <- (front + 1) % MAX_SIZE
	 item <- queue_arr[front]
         // queue_arr[front] <- -1

     is_empty() == true이면 꺼낼 원소가 없음(error)
